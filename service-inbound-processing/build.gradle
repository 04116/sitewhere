description = 'SiteWhere Inbound Processing Microservice'

dependencies {
	compile project(':sitewhere-communication')
	compile project(':sitewhere-microservice')
	
	// Connectivity to other microservices.
	compile project(':sitewhere-grpc-device-management')
	compile project(':sitewhere-grpc-event-management')
}

apply plugin: 'org.springframework.boot'
springBoot {
    mainClassName = 'com.sitewhere.inbound.InboundProcessingApplication'
}

// Keep original jar.
jar {
	enabled = true
}

// Reclassify Spring Boot jar.
bootJar {
	classifier = 'boot'
}

// Only publish thin jar.
apply plugin: 'maven-publish'
publishing {
	publications {
        mavenJava(MavenPublication) {
            from components.java
        }
	}
}

// Create a Dockerfile.
task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: bootJar) {
    destFile = project.file('build/docker/Dockerfile')
    from "${rootProject.ext['docker.base.image']}"
    maintainer "${rootProject.ext['docker.maintainer']}"
	
	// Copy Spring Boot jar.
	copyFile("${project.name}-${project.version}-boot.jar", "/")

	// Run Java command to start application.
	defaultCommand 'java', '-Xmx768M', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap', '-jar', "/${project.name}-${project.version}-boot.jar"
}

// Copy artifacts to Docker input folder.
task copyArtifactsToDocker(type: Copy, dependsOn: dockerFile) {
    from "${buildDir}/libs/${project.name}-${project.version}-boot.jar"
	into 'build/docker'
}

// Build an image from the Dockerfile.
task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')
    tag = "${dockerRepository}/sitewhere/${project.name}:${version}"
}

// Push image to remote repository.
task dockerPush(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImage) {
    imageName = "${dockerRepository}/sitewhere/${project.name}"
    tag = "${version}"
}
