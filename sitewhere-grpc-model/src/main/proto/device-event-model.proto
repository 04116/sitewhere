syntax = "proto3";

package com.sitewhere.grpc.model;

option java_outer_classname = "DeviceEventModel";

import "sitewhere-common.proto";
import "google/protobuf/timestamp.proto";

// #####################
// ### DEVICE EVENTS ###
// #####################

// Base fields for creating a device event.
message GDeviceEventCreateRequest {
	GOptionalString alternateId = 1;
	google.protobuf.Timestamp eventDate = 2;
	GOptionalBoolean updateState = 3;
	map<string, string> metadata = 4;
}

// Request data for creating device measurements.
message GDeviceMeasurementsCreateRequest {
	map<string, double> measurements = 1;
	GDeviceEventCreateRequest event = 2;
}

// Alert source.
enum GAlertSource {
	ALERT_SOURCE_DEVICE = 0;
	ALERT_SOURCE_SYSTEM = 1;
}

// Alert level.
enum GAlertLevel {
	ALERT_LEVEL_INFO = 0;
	ALERT_LEVEL_WARNING = 1;
	ALERT_LEVEL_ERROR = 2;
	ALERT_LEVEL_CRITICAL = 3;
}

// Request data for creating device alert.
message GDeviceAlertCreateRequest {
	GAlertSource source = 1;
	GAlertLevel level = 2;
	string type = 3;
	string alertMessage = 4;
	GDeviceEventCreateRequest event = 5;
}

// Request data for creating device location.
message GDeviceLocationCreateRequest {
	GOptionalDouble latitude = 1;
	GOptionalDouble longitude = 2;
	GOptionalDouble elevation = 3;
	GDeviceEventCreateRequest event = 4;
}

// Request data for creating device stream data.
message GDeviceStreamDataCreateRequest {
	string streamId = 1;
	int64 sequenceNumber = 2;
	bytes data = 3;
	GDeviceEventCreateRequest event = 4;
}

// Request data for invoking a device command.
message GDeviceCommandInvocationCreateRequest {
	GDeviceCommandInitiator initiator = 1;
	string initiatorId = 2;
	GDeviceCommandTarget target = 3;
	string targetId = 4;
	string commandToken = 5;
	map<string, string> parameterValues = 6;
	GDeviceCommandStatus status = 7;
	GDeviceEventCreateRequest event = 8;
}

// Request data for a device command response.
message GDeviceCommandResponseCreateRequest {
	string originatingEventId = 1;
	GOptionalString responseEventId = 2;
	GOptionalString response = 3;
	GDeviceEventCreateRequest event = 4;
}

// Request data for a device state change.
message GDeviceStateChangeCreateRequest {
	GStateChangeCategory category = 1;
	GStateChangeType type = 2;
	string previousState = 3;
	string newState = 4;
	map<string, string> data = 5;
	GDeviceEventCreateRequest event = 6;
}

// Message that can contain any type of event create request.
message GAnyDeviceEventCreateRequest {
	oneof event {
		GDeviceMeasurementsCreateRequest measurements = 1;
		GDeviceAlertCreateRequest alert = 2;
		GDeviceLocationCreateRequest location = 3;
		GDeviceStreamDataCreateRequest streamData = 4;
		GDeviceCommandInvocationCreateRequest commandInvocation = 5;
		GDeviceCommandResponseCreateRequest commandResponse = 6;
		GDeviceStateChangeCreateRequest stateChange = 7;
	}
}

// Device event type.
enum GDeviceEventType {
	EVENT_TYPE_MEASUREMENTS = 0;
	EVENT_TYPE_MEASUREMENT = 1;
	EVENT_TYPE_LOCATION = 2;
	EVENT_TYPE_ALERT = 3;
	EVENT_TYPE_STREAM_DATA = 4;
	EVENT_TYPE_COMMAND_INVOCATION = 5;
	EVENT_TYPE_COMMAND_RESPONSE = 6;
	EVENT_TYPE_STATE_CHANGE = 7;
}

// Common device event information.
message GDeviceEvent {
	string id = 1;
	GOptionalString alternateId = 2;
	GDeviceEventType eventType = 3;
	string siteToken = 4;
	string assignmentToken = 5;
	GDeviceAssignmentType assignmentType = 6;
	GOptionalString assetModuleId = 7;
	GOptionalString assetId = 8;
	google.protobuf.Timestamp eventDate = 9;
	google.protobuf.Timestamp receivedDate = 10;
	map<string, string> metadata = 11;
}

// Measurements event.
message GDeviceMeasurements {
	map<string, double> measurements = 1;
	GDeviceEvent event = 2;
}

// Alert event.
message GDeviceAlert {
	GAlertSource source = 1;
	GAlertLevel level = 2;
	string type = 3;
	string alertMessage = 4;
	GDeviceEvent event = 5;
}

// Location event.
message GDeviceLocation {
	GOptionalDouble latitude = 1;
	GOptionalDouble longitude = 2;
	GOptionalDouble elevation = 3;
	GDeviceEvent event = 4;
}

// Stream data event.
message GDeviceStreamData {
	string streamId = 1;
	int64 sequenceNumber = 2;
	bytes data = 3;
	GDeviceEvent event = 4;
}

// Command invocation event.
message GDeviceCommandInvocation {
	GDeviceCommandInitiator initiator = 1;
	string initiatorId = 2;
	GDeviceCommandTarget target = 3;
	string targetId = 4;
	string commandToken = 5;
	map<string, string> parameterValues = 6;
	GDeviceCommandStatus status = 7;
	GDeviceEvent event = 8;
}

// Command response event.
message GDeviceCommandResponse {
	string originatingEventId = 1;
	GOptionalString responseEventId = 2;
	GOptionalString response = 3;
	GDeviceEvent event = 4;
}

// State change event.
message GDeviceStateChange {
	GStateChangeCategory category = 1;
	GStateChangeType type = 2;
	string previousState = 3;
	string newState = 4;
	map<string, string> data = 5;
	GDeviceEvent event = 6;
}

// Message that can contain any type of event.
message GAnyDeviceEvent {
	oneof event {
		GDeviceMeasurements measurements = 1;
		GDeviceAlert alert = 2;
		GDeviceLocation location = 3;
		GDeviceStreamData streamData = 4;
		GDeviceCommandInvocation commandInvocation = 5;
		GDeviceCommandResponse commandResponse = 6;
		GDeviceStateChange stateChange = 7;
	}
}

// Context information for a device event.
message GDeviceEventContext {
	string hardwareId = 1;
	string specificationToken = 2;
	GOptionalString parentHardwareId = 3;
	GOptionalString deviceStatus = 4;
	map<string, string> deviceMetadata = 5;
	GDeviceAssignmentStatus assignmentStatus = 6;
	map<string, string> assignmentMetadata = 7;
}

// Criteria for searching device events.
message GDeviceEventSearchCriteria {
	GDateRangeSearchCriteria criteria = 1;
}

// Results for device events search.
message GDeviceEventSearchResults {
	int64 count = 1;
	repeated GAnyDeviceEvent events = 2;
}

// Results for device measurements search.
message GDeviceMeasurementsSearchResults {
	int64 count = 1;
	repeated GDeviceMeasurements measurements = 2;
}

// Results for device alert search.
message GDeviceAlertSearchResults {
	int64 count = 1;
	repeated GDeviceAlert alerts = 2;
}

// Results for device alert search.
message GDeviceLocationSearchResults {
	int64 count = 1;
	repeated GDeviceLocation locations = 2;
}

// Results for device stream data search.
message GDeviceStreamDataSearchResults {
	int64 count = 1;
	repeated GDeviceStreamData streamData = 2;
}

// Results for device command invocation search.
message GDeviceCommandInvocationSearchResults {
	int64 count = 1;
	repeated GDeviceCommandInvocation invocations = 2;
}

// Results for device command response search.
message GDeviceCommandResponseSearchResults {
	int64 count = 1;
	repeated GDeviceCommandResponse responses = 2;
}

// Results for device state change search.
message GDeviceStateChangeSearchResults {
	int64 count = 1;
	repeated GDeviceStateChange stateChanges = 2;
}

// ####################
// ### BATCH EVENTS ###
// ####################

// Request data for a batch of device events.
message GDeviceEventBatchCreateRequest {
	string hardwareId = 1;
	repeated GDeviceMeasurementsCreateRequest measurements = 2;
	repeated GDeviceAlertCreateRequest alerts = 3;
	repeated GDeviceLocationCreateRequest locations = 4;
}

// Response data for a batch event request.
message GDeviceEventBatchResponse {
	repeated GDeviceMeasurements measurements = 1;
	repeated GDeviceAlert alerts = 2;
	repeated GDeviceLocation locations = 3;
}
