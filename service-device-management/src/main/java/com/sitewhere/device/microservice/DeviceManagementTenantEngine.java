/*
 * Copyright (c) SiteWhere, LLC. All rights reserved. http://www.sitewhere.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.sitewhere.device.microservice;

import com.sitewhere.device.configuration.DeviceManagementTenantConfiguration;
import com.sitewhere.device.configuration.DeviceManagementTenantEngineModule;
import com.sitewhere.device.kafka.DeviceInteractionEventsProducer;
import com.sitewhere.device.spi.kafka.IDeviceInteractionEventsProducer;
import com.sitewhere.device.spi.microservice.IDeviceManagementMicroservice;
import com.sitewhere.device.spi.microservice.IDeviceManagementTenantEngine;
import com.sitewhere.grpc.service.DeviceManagementGrpc;
import com.sitewhere.microservice.api.asset.IAssetManagement;
import com.sitewhere.microservice.api.device.IDeviceManagement;
import com.sitewhere.microservice.lifecycle.CompositeLifecycleStep;
import com.sitewhere.microservice.multitenant.MicroserviceTenantEngine;
import com.sitewhere.spi.SiteWhereException;
import com.sitewhere.spi.microservice.IFunctionIdentifier;
import com.sitewhere.spi.microservice.MicroserviceIdentifier;
import com.sitewhere.spi.microservice.lifecycle.ICompositeLifecycleStep;
import com.sitewhere.spi.microservice.lifecycle.ILifecycleProgressMonitor;
import com.sitewhere.spi.microservice.multitenant.IMicroserviceTenantEngine;
import com.sitewhere.spi.microservice.multitenant.ITenantEngineModule;

import io.sitewhere.k8s.crd.tenant.engine.SiteWhereTenantEngine;
import io.sitewhere.k8s.crd.tenant.engine.dataset.TenantEngineDatasetTemplate;

/**
 * Implementation of {@link IMicroserviceTenantEngine} that implements device
 * management functionality.
 */
public class DeviceManagementTenantEngine extends MicroserviceTenantEngine<DeviceManagementTenantConfiguration>
	implements IDeviceManagementTenantEngine {

    /** Device management persistence API */
    private IDeviceManagement deviceManagement;

    /** Responds to device management GRPC requests */
    private DeviceManagementGrpc.DeviceManagementImplBase deviceManagementImpl;

    /** Produces events generated by device interactions */
    private IDeviceInteractionEventsProducer deviceInteractionEventsProducer;

    public DeviceManagementTenantEngine(SiteWhereTenantEngine engine) {
	super(engine);
    }

    /*
     * @see com.sitewhere.spi.microservice.multitenant.IMicroserviceTenantEngine#
     * getConfigurationClass()
     */
    @Override
    public Class<DeviceManagementTenantConfiguration> getConfigurationClass() {
	return DeviceManagementTenantConfiguration.class;
    }

    /*
     * @see com.sitewhere.spi.microservice.multitenant.IMicroserviceTenantEngine#
     * getConfigurationModule()
     */
    @Override
    public ITenantEngineModule<DeviceManagementTenantConfiguration> getConfigurationModule() {
	return new DeviceManagementTenantEngineModule(getActiveConfiguration());
    }

    /*
     * @see com.sitewhere.spi.microservice.multitenant.IMicroserviceTenantEngine#
     * tenantInitialize(com.sitewhere.spi.microservice.lifecycle.
     * ILifecycleProgressMonitor)
     */
    @Override
    public void tenantInitialize(ILifecycleProgressMonitor monitor) throws SiteWhereException {
	// // Create management interfaces.
	// IDeviceManagement implementation = (IDeviceManagement) getModuleContext()
	// .getBean(DeviceManagementBeans.BEAN_DEVICE_MANAGEMENT);
	// this.deviceManagement = new DeviceManagementTriggers(implementation, this);
	// this.deviceManagementImpl = new
	// DeviceManagementImpl((IDeviceManagementMicroservice) getMicroservice(),
	// getDeviceManagement());

	// Device interaction events producer.
	this.deviceInteractionEventsProducer = new DeviceInteractionEventsProducer();

	// Create step that will initialize components.
	ICompositeLifecycleStep init = new CompositeLifecycleStep("Initialize " + getComponentName());

	// Initialize device management persistence.
	init.addInitializeStep(this, getDeviceManagement(), true);

	// Initialize device interaction events producer.
	init.addInitializeStep(this, getDeviceInteractionEventsProducer(), true);

	// Execute initialization steps.
	init.execute(monitor);
    }

    /*
     * @see com.sitewhere.spi.microservice.multitenant.IMicroserviceTenantEngine#
     * tenantStart(com.sitewhere.spi.microservice.lifecycle.
     * ILifecycleProgressMonitor)
     */
    @Override
    public void tenantStart(ILifecycleProgressMonitor monitor) throws SiteWhereException {
	// Create step that will start components.
	ICompositeLifecycleStep start = new CompositeLifecycleStep("Start " + getComponentName());

	// Start device management persistence.
	start.addStartStep(this, getDeviceManagement(), true);

	// Start device interaction events producer.
	start.addStartStep(this, getDeviceInteractionEventsProducer(), true);

	// Execute startup steps.
	start.execute(monitor);
    }

    /*
     * @see com.sitewhere.microservice.multitenant.MicroserviceTenantEngine#
     * getTenantBootstrapPrerequisites()
     */
    @Override
    public IFunctionIdentifier[] getTenantBootstrapPrerequisites() {
	return new IFunctionIdentifier[] { MicroserviceIdentifier.AssetManagement };
    }

    /*
     * @see com.sitewhere.spi.microservice.multitenant.IMicroserviceTenantEngine#
     * tenantBootstrap(io.sitewhere.k8s.crd.tenant.engine.dataset.
     * TenantEngineDatasetTemplate,
     * com.sitewhere.spi.microservice.lifecycle.ILifecycleProgressMonitor)
     */
    @Override
    public void tenantBootstrap(TenantEngineDatasetTemplate template, ILifecycleProgressMonitor monitor)
	    throws SiteWhereException {
	// String scriptName = String.format("%s.groovy",
	// template.getMetadata().getName());
	// Path path = getScriptSynchronizer().add(getScriptContext(),
	// ScriptType.Initializer, scriptName,
	// template.getSpec().getConfiguration().getBytes());
	//
	// Execute remote calls as superuser.
	// Authentication previous =
	// SecurityContextHolder.getContext().getAuthentication();
	// try {
	// SecurityContextHolder.getContext()
	// .setAuthentication(getMicroservice().getSystemUser().getAuthenticationForTenant(getTenant()));
	//
	// getLogger().info(String.format("Applying bootstrap script '%s'.", path));
	// GroovyDeviceModelInitializer initializer = new
	// GroovyDeviceModelInitializer(getGroovyConfiguration(), path);
	// initializer.initialize(getDeviceManagement(), getAssetManagement());
	// } catch (Throwable e) {
	// getLogger().error("Unhandled exception in bootstrap script.", e);
	// throw new SiteWhereException(e);
	// } finally {
	// SecurityContextHolder.getContext().setAuthentication(previous);
	// }
    }

    /*
     * @see com.sitewhere.spi.microservice.multitenant.IMicroserviceTenantEngine#
     * tenantStop(com.sitewhere.spi.microservice.lifecycle.
     * ILifecycleProgressMonitor)
     */
    @Override
    public void tenantStop(ILifecycleProgressMonitor monitor) throws SiteWhereException {
	// Create step that will stop components.
	ICompositeLifecycleStep stop = new CompositeLifecycleStep("Stop " + getComponentName());

	// Stop device interaction events producer.
	stop.addStopStep(this, getDeviceInteractionEventsProducer());

	// Stop device management persistence.
	stop.addStopStep(this, getDeviceManagement());

	// Execute shutdown steps.
	stop.execute(monitor);
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.sitewhere.device.spi.microservice.IDeviceManagementTenantEngine#
     * getDeviceManagement()
     */
    @Override
    public IDeviceManagement getDeviceManagement() {
	return deviceManagement;
    }

    public void setDeviceManagement(IDeviceManagement deviceManagement) {
	this.deviceManagement = deviceManagement;
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.sitewhere.device.spi.microservice.IDeviceManagementTenantEngine#
     * getDeviceManagementImpl()
     */
    @Override
    public DeviceManagementGrpc.DeviceManagementImplBase getDeviceManagementImpl() {
	return deviceManagementImpl;
    }

    public void setDeviceManagementImpl(DeviceManagementGrpc.DeviceManagementImplBase deviceManagementImpl) {
	this.deviceManagementImpl = deviceManagementImpl;
    }

    /*
     * @see com.sitewhere.device.spi.microservice.IDeviceManagementTenantEngine#
     * getDeviceInteractionEventsProducer()
     */
    @Override
    public IDeviceInteractionEventsProducer getDeviceInteractionEventsProducer() {
	return deviceInteractionEventsProducer;
    }

    public void setDeviceInteractionEventsProducer(IDeviceInteractionEventsProducer deviceInteractionEventsProducer) {
	this.deviceInteractionEventsProducer = deviceInteractionEventsProducer;
    }

    public IAssetManagement getAssetManagement() {
	return ((IDeviceManagementMicroservice) getMicroservice()).getAssetManagementApiChannel();
    }
}