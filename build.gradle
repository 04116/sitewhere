buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
		classpath 'gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.7.3'
		classpath 'io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE'
		classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
		classpath 'com.github.skhatri:gradle-s3-plugin:1.0.2'
		classpath 'se.transmode.gradle:gradle-docker:1.2'
	}
}

ext {
    tomcatVersion = '7.0.67'
}

apply plugin: 's3'
s3 {
    bucket = 'sitewhere'
    awsProfile = 'gradle'
}

apply plugin: 'docker'
docker {
    baseImage "ubuntu:14.04"
    maintainer 'Derek Adams "derek.adams@sitewhere.com"'
    useApi true
}

allprojects  {
    apply plugin: 'com.bmuschko.nexus'

    group = 'com.sitewhere'
    version = '1.6.0'
	
    repositories {
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url 'http://maven.restlet.org' }
        maven { url "https://jitpack.io" }
        maven { url "http://dist.wso2.org/maven2/" }
        maven { url "http://oss.jfrog.org/artifactory/oss-release-local/" }
        maven { url "https://oss.sonatype.org/content/repositories/ksoap2-android-releases/" }
    }
    
	modifyPom {
		project {
			name project.description
			description project.description
			url 'http://www.sitewhere.org/'
			inceptionYear '2009'
			
			scm {
				url 'https://github.com/sitewhere/sitewhere'
				connection 'https://github.com/sitewhere/sitewhere.git'
			}

			issueManagement {
				system 'Jira'
				url 'https://sitewhere.atlassian.net'
			}
			
			organization {
				name 'SiteWhere, LLC.'
				url 'http://www.sitewhere.com/'
			}

			licenses {
				license {
					name 'Common Public Attribution License Version 1.0 (CPAL-1.0)'
					url 'http://opensource.org/licenses/CPAL-1.0'
					distribution 'repo'
				}
			}

			developers {
				developer {
					id 'derekadams'
					name 'Derek Adams'
					email 'derek.adams@sitewhere.com'
				}
			}
		}
	}
}


subprojects {
 	apply plugin: 'io.spring.dependency-management'
 	
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
	dependencyManagement {
		imports {
			mavenBom 'io.spring.platform:platform-bom:2.0.2.RELEASE'
		}
	}
  
    dependencies {
        compile(group: 'log4j', name: 'log4j')
        testCompile group: 'junit', name: 'junit'
    }
    test {
        exclude '**/*'
    }

    javadoc {
    	failOnError = false
        options.footer = '<script>(function(i,s,o,g,r,a,m){i["GoogleAnalyticsObject"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,"script","//www.google-analytics.com/analytics.js","ga");ga("create", "UA-42457307-1", {"cookieDomain": "sitewhere.org"});ga("send", "pageview");</script>'
    }
}

configurations {
    tomcat
}

dependencies {
    tomcat "org.apache.tomcat:tomcat:${tomcatVersion}@tar.gz"
}

// Create layout for zip and tar archives.
task createServerLayout {
    doLast {
        copy {
            from(tarTree(configurations.tomcat.getSingleFile()))
            exclude '**/webapps/*/**'
            into "$buildDir/tomcat" 
        }

        copy {
            from(project(':sitewhere-web').war)
            into "$buildDir/tomcat/apache-tomcat-${tomcatVersion}/webapps" 

            rename { String fileName ->
                fileName.replace("sitewhere-web-${version}.war", 'sitewhere.war')
            }
        }

        copy {
            from(project(':sitewhere-core').projectDir.path + '/config')
            into "$buildDir/tomcat/apache-tomcat-${tomcatVersion}/conf" 
            exclude 'log4j.xml'
        }

        copy {
            from(tarTree(project(':sitewhere-core').projectDir.path + '/config/policy.tar'))
            into "$buildDir/tomcat/apache-tomcat-${tomcatVersion}/conf" 
        }

        copy {
            from(project(':sitewhere-core').projectDir.path + '/config')
            into "$buildDir/tomcat/apache-tomcat-${tomcatVersion}/lib" 
            include 'log4j.xml'
        }

        copy {
            from(project(':sitewhere-core').projectDir.path + '/config')
            into "$buildDir/tomcat/apache-tomcat-${tomcatVersion}/bin" 
            include 'setenv.*'
        }
    }
}

// Build server zip distrubtion
task serverZip(type: Zip) {
    baseName = 'sitewhere-server'
    from "$buildDir/tomcat/apache-tomcat-${tomcatVersion}"
    into "${baseName}-${version}"
    exclude '**/conf/policy.d'
}

// Upload server zip file to Amazon S3
task uploadServerZip(type: com.github.skhatri.s3aws.plugin.S3UploadTask, dependsOn: serverZip) {
    key = serverZip.archiveName
    file = serverZip.archivePath
    
    doLast {
    	println 'Uploaded server zip to Amazon S3.'
    }
}

// Build server tar distrubtion
task serverTar(type: Tar) {
    baseName = 'sitewhere-server'
    compression = 'GZIP'
 	from("$buildDir/tomcat/apache-tomcat-${tomcatVersion}") {
		exclude ('**/*.sh')
	}
	from("$buildDir/tomcat/apache-tomcat-${tomcatVersion}") {
		include ('**/*.sh')
		fileMode 0755
	}    
	into "${baseName}-${version}"
}

// Upload server tar file to Amazon S3
task uploadServerTar(type: com.github.skhatri.s3aws.plugin.S3UploadTask, dependsOn: serverTar) {
    key = serverTar.archiveName
    file = serverTar.archivePath
    
    doLast {
    	println 'Uploaded server tar to Amazon S3.'
    }
}

// Create the standalone Docker image.
task dockerStandalone(type: Docker, dependsOn: serverZip) {
	project.group = 'sitewhere'
	
    applicationName = 'standalone'
    runCommand 'add-apt-repository ppa:openjdk-r/ppa'
    runCommand 'apt-get update'
    runCommand 'apt-get install -y unzip wget openjdk-8-jdk'
    
    // Install HiveMQ
    runCommand "cd /opt && wget --content-disposition https://s3.amazonaws.com/sitewhere-hivemq/hivemq-3.0.2.zip && unzip hivemq-3.0.2.zip"
    addFile "${projectDir}/sitewhere-docker/standalone/1.5.0/config.xml", "/opt/hivemq-3.0.2/conf/config.xml"
    runCommand "ln -s /opt/hivemq-3.0.2 /opt/hivemq && useradd -d /opt/hivemq hivemq && chown -R hivemq.hivemq /opt/hivemq-3.0.2 && chown -R hivemq.hivemq /opt/hivemq && cd /opt/hivemq && chmod +x ./bin/run.sh"
    
    // Install MongoDB
    runCommand "apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 && echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list && apt-get update && apt-get install -y mongodb-org && mkdir -p /data/db"
    
    // Install SiteWhere
	addFile serverZip.archivePath, "/opt/sitewhere-server-${version}.zip"
    runCommand "cd /opt unzip sitewhere-server-${version}.zip"
	setEnvironment 'catalina.base', "/opt/sitewhere-server-${version}"
	setEnvironment 'catalina.home', "/opt/sitewhere-server-${version}"
    runCommand "ln -s /opt/sitewhere-server-${version} /opt/sitewhere && useradd -d /opt/sitewhere sitewhere && chown -R sitewhere.sitewhere /opt/sitewhere-server-${version} && chown -R sitewhere.sitewhere /opt/sitewhere && cd /opt/sitewhere && chmod +x /opt/sitewhere-server-${version}/bin/*.sh"

	def commands = []
	commands << "nohup /opt/hivemq/bin/run.sh > /dev/null & nohup /usr/bin/mongod --smallfiles > /dev/null & echo 'Waiting for MongoDB to start...' && while ! nc -vz localhost 27017 2> /dev/null; do sleep 1; done && nohup /opt/sitewhere/bin/startup.sh & echo 'Starting SiteWhere...' && while ! [ -f /opt/sitewhere/logs/catalina.out ]; do sleep 1; done && tail -f /opt/sitewhere/logs/catalina.out"
	defaultCommand commands
}

createServerLayout.dependsOn subprojects.build
serverZip.dependsOn createServerLayout
serverTar.dependsOn createServerLayout

uploadArchives {
	dependsOn uploadServerZip
	dependsOn uploadServerTar
}
