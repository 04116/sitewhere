description = 'SiteWhere Event Sources Microservice'

dependencies {
	compile project(':sitewhere-communication')
	compile project(':sitewhere-microservice')
	
    compile group: 'org.springframework', name: 'spring-web'
	
	// ActiveMQ dependencies.
    compile group: 'org.apache.activemq', name: 'activemq-amqp', version:'5.14.0'
    compile group: 'org.apache.activemq', name: 'activemq-mqtt', version:'5.14.0'
    compile group: 'org.apache.activemq', name: 'activemq-stomp', version:'5.14.0'
    compile group: 'org.apache.activemq', name: 'activemq-kahadb-store', version:'5.14.0'
    
    // Azure dependencies.
    compile group: 'org.apache.qpid', name: 'qpid-amqp-1-0-client', version:'0.32'
    compile group: 'org.apache.activemq', name: 'activemq-broker'
    
    // RabbitMQ dependencies.
    compile group: 'com.rabbitmq', name: 'amqp-client', version:'3.6.0'
	
	// WebSocket dependencies.
    compile group: 'javax.websocket', name: 'javax.websocket-api', version:'1.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-server', version:'1.13.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-server', version:'1.13.1'
}
test {
    exclude '**/*'
}

license {
	exclude "**/azure/**"
}

apply plugin: 'org.springframework.boot'
springBoot {
    mainClassName = 'com.sitewhere.sources.EventSourcesApplication'
}

// Create a Dockerfile.
task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: bootJar) {
    destFile = project.file('build/docker/Dockerfile')
    from "${rootProject.ext['docker.base.image']}"
    maintainer "${rootProject.ext['docker.maintainer']}"
	
	// Copy Spring Boot jar.
	copyFile("${project.name}-${project.version}.jar", "/")

	// Run Java command to start application.
	defaultCommand 'java', '-Xmx768M', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap', '-jar', "/${project.name}-${project.version}.jar"
}

// Copy artifacts to Docker input folder.
task copyArtifactsToDocker(type: Copy, dependsOn: dockerFile) {
    from "${buildDir}/libs/${project.name}-${project.version}.jar"
	into 'build/docker'
}

// Build an image from the Dockerfile.
task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')
    tag = "${dockerRepository}/sitewhere/${project.name}:${version}"
}

// Push image to remote repository.
task dockerPush(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImage) {
    imageName = "${dockerRepository}/sitewhere/${project.name}"
    tag = "${version}"
}
