description = 'SiteWhere Web/REST Microservice'

apply plugin: 'org.springframework.boot'
springBoot {
    mainClassName = 'com.sitewhere.web.WebRestApplication'
}

apply plugin: 'com.moowork.node'
node {
	version = '8.10.0'
	npmVersion = '5.7.1'
	nodeModulesDir = file("${rootProject.projectDir}/sitewhere-ui")
	npmWorkDir = file("${rootProject.projectDir}/sitewhere-ui")
	download = true
}

// Prevents Logback conflict.
configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
	compile project(':sitewhere-communication')
	compile project(':sitewhere-microservice')
	
	// Connectivity to other microservices.
	compile project(':sitewhere-grpc-asset-management')
	compile project(':sitewhere-grpc-batch-management')
	compile project(':sitewhere-grpc-device-management')
	compile project(':sitewhere-grpc-event-management')
	compile project(':sitewhere-grpc-label-generation')
	
	compile ('org.springframework.boot:spring-boot-starter-web')
	compile ('org.springframework.boot:spring-boot-starter-websocket')    
	compile group: 'org.springframework', name: 'spring-web'
	
	// Swagger
    compile group: 'io.springfox', name: 'springfox-swagger2', version:'2.8.0'
    
    // Spring Security
    compile group: 'org.springframework.security', name: 'spring-security-config'
    compile group: 'org.springframework.security', name: 'spring-security-web'
	
	// Quartz.
    compile group: 'org.quartz-scheduler', name: 'quartz', version:'2.2.2'
	
	// Tracing support for Spring web components.
    compile group: 'io.opentracing.contrib', name: 'opentracing-spring-web', version:'0.0.10'
}

// Build user interface.
task buildUserInterface(type: NpmTask, dependsOn: npm_install) {
	args = ['run', 'build']
}

// Before building the Spring Boot WAR, generate user interface.
apply plugin: 'war'
bootWar {
	classifier = 'boot'
	dependsOn buildUserInterface
	with {
		from( "${rootProject.projectDir}/sitewhere-ui/dist" )
	}
}

// Keep original jar.
jar { enabled = true }

// Only publish thin jar.
apply plugin: 'maven-publish'
publishing {
    publications {
	mavenJava(MavenPublication) { from components.java }
    }
}

// Create a Dockerfile.
task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: bootWar) {
    destFile = project.file('build/docker/Dockerfile')
    from "${rootProject.ext['docker.base.image']}"
    maintainer "${rootProject.ext['docker.maintainer']}"
	
	// Copy Spring Boot jar.
	copyFile("${project.name}-${project.version}-boot.war", "/")

	// Run Java command to start application.
	defaultCommand 'java', '-Xmx768M', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap', '-jar', "/${project.name}-${project.version}-boot.war"
}

// Copy artifact to Docker input folder.
task copyArtifactToDocker(type: Copy, dependsOn: dockerFile) {
    from "${buildDir}/libs/${project.name}-${project.version}-boot.war"
    into 'build/docker'
}

// Build an image from the Dockerfile.
task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactToDocker) {
    inputDir = project.file('build/docker')
    tag = "${dockerRepository}/sitewhere/${project.name}:${version}"
}

// Push image to remote repository.
task dockerPush(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImage) {
    imageName = "${dockerRepository}/sitewhere/${project.name}"
    tag = "${version}"
}
