description = 'SiteWhere Outbound Processing Microservice'

apply plugin: 'nebula.provided-base'

dependencies {
	compile project(':sitewhere-communication')
	compile project(':sitewhere-microservice')
    
    // Amazon SQS dependencies.
	compile group: 'com.amazonaws', name: 'aws-java-sdk-sqs', version: '1.9.6'
    
    // Azure dependencies.
    compile group: 'org.apache.qpid', name: 'qpid-amqp-1-0-client', version:'0.32'
    compile group: 'org.apache.activemq', name: 'activemq-broker'
    
    // RabbitMQ dependencies.
    compile group: 'com.rabbitmq', name: 'amqp-client', version:'3.6.0'
    
    // Apache Solr
    compile group: 'org.apache.solr', name: 'solr-solrj', version: "${rootProject.ext['solr.version']}"
}

apply plugin: 'org.springframework.boot'
springBoot {
    mainClass = 'com.sitewhere.outbound.OutboundProcessingApplication'
}

// Create a Dockerfile.
task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: bootRepackage) {
    destFile = project.file('build/docker/Dockerfile')
    from "${rootProject.ext['docker.base.image']}"
    maintainer "${rootProject.ext['docker.maintainer']}"
	
	// Copy Spring Boot jar.
	copyFile("${project.name}-${project.version}.jar", "/")

	// Run Java command to start application.
	defaultCommand 'java', "-Xmx${rootProject.ext['docker.java.memory']}", '-jar', "/${project.name}-${project.version}.jar"
}

// Copy artifacts to Docker input folder.
task copyArtifactsToDocker(type: Copy, dependsOn: dockerFile) {
    from "${buildDir}/libs/${project.name}-${project.version}.jar"
	into 'build/docker'
}

// Build an image from the Dockerfile.
task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')
    tag = "${dockerRepository}/sitewhere/${project.name}:${version}"
}
