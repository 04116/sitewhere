description = 'SiteWhere Batch Operations Microservice'

dependencies {
	compile project(':sitewhere-core')
	compile project(':sitewhere-mongodb')
	compile project(':sitewhere-hbase')
	compile project(':sitewhere-microservice')
}

license {
}

apply plugin: 'org.springframework.boot'
springBoot {
    mainClass = 'com.sitewhere.batch.BatchOperationsApplication'
}

// Create a Dockerfile.
task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: bootRepackage) {
    destFile = project.file('build/docker/Dockerfile')
    from "${rootProject.ext['docker.base.image']}"
    maintainer "${rootProject.ext['docker.maintainer']}"
	
	// Expose ports.
	exposePort 8080
	
	// Copy Spring Boot jar.
	copyFile("${project.name}-${project.version}.jar", "/")

	// Run Java command to start application.
	defaultCommand 'java', "-Xmx${rootProject.ext['docker.java.memory']}", '-jar', "/${project.name}-${project.version}.jar"
}

// Copy artifact to Docker input folder.
task copyArtifactToDocker(type: Copy, dependsOn: dockerFile) {
    from "${buildDir}/libs/${project.name}-${project.version}.jar"
    into 'build/docker'
}

// Build an image from the Dockerfile.
task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactToDocker) {
    inputDir = project.file('build/docker')
    tag = "${dockerRepository}/sitewhere/${project.name}:${version}"
}

// Push image to remote repository.
task dockerPush(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImage) {
    imageName = "${dockerRepository}/sitewhere/${project.name}"
    tag = "${version}"
}
