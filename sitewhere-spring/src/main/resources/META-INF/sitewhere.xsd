<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.sitewhere.com/schema/sitewhere/ce" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:beans="http://www.springframework.org/schema/beans" targetNamespace="http://www.sitewhere.com/schema/sitewhere/ce"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans"
		schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"/>

	<xsd:element name="configuration" type="configurationType">
		<xsd:annotation>
			<xsd:documentation>
				Provides configuration information for a SiteWhere server instance.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<xsd:complexType name="configurationType">
		<xsd:all>
			<xsd:element name="datastore" type="datastoreType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Provides information about how SiteWhere data is to be persisted
						and how the core device and user management service provider interfaces are
						implemented. Caching of persisted data is also configured in this section.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="provisioning" type="provisioningType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Provisioning includes receiving inbound event data and registering
						devices as well as routing, encoding, and delivering device commands.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="inbound-processing-chain" type="inboundProcessingChainType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						A chain of processors through which all inbound device information
						is passed. Each processor handles some piece of processing and passes information on
						to the next.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="outbound-processing-chain" type="outboundProcessingChainType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						A chain of processors through which all outbound device events are
						passed. Each processor handles some piece of processing and passes information on to
						the next.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="asset-management" type="assetManagementType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Specifies details related to the asset management subsystem
						including the asset manager implementation and the list of asset modules that should
						be used for device assignments.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:all>
	</xsd:complexType>

	<xsd:complexType name="datastoreType">
		<xsd:sequence>
			<xsd:element ref="abstract-datastore"/>
			<xsd:element ref="abstract-cache" minOccurs="0" maxOccurs="1"/>
			<xsd:element minOccurs="0" name="default-device-model-initializer" type="defaultDeviceModelInitializerType">
				<xsd:annotation>
					<xsd:documentation>
						Initializes device model with data if database is empty.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" name="default-user-model-initializer" type="defaultUserModelInitializerType">
				<xsd:annotation>
					<xsd:documentation>
						Initializes user model with data if database is empty.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for datastores to allow substitutionGroups -->
	<xsd:element name="abstract-datastore" abstract="true" type="abstractDatastoreType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for datastore elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common datastore information -->
	<xsd:complexType name="abstractDatastoreType"/>

	<!-- Configuration data for a MongoDB datastore -->
	<xsd:element name="mongo-datastore" type="mongoDatastoreType"
		substitutionGroup="abstract-datastore">
		<xsd:annotation>
			<xsd:documentation>Datastore that uses MongoDB for data persistence.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mongoDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractDatastoreType">
				<xsd:attribute name="hostname" type="xsd:string"></xsd:attribute>
				<xsd:attribute name="port" type="xsd:int"></xsd:attribute>
				<xsd:attribute name="databaseName" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Configuration data for an HBase datastore -->
	<xsd:element name="hbase-datastore" type="hbaseDatastoreType"
		substitutionGroup="abstract-datastore">
		<xsd:annotation>
			<xsd:documentation>Datastore that uses Apache HBase for data persistence.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hbaseDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractDatastoreType">
				<xsd:attribute name="quorum" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for device management caches to allow substitutionGroups -->
	<xsd:element name="abstract-cache" abstract="true" type="abstractCacheType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for device management cache elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common cache information -->
	<xsd:complexType name="abstractCacheType"/>

	<!-- Configuration data for EHCache cache provider -->
	<xsd:element name="ehcache-device-management-cache" type="ehcacheDeviceManagementCacheType"
		substitutionGroup="abstract-cache">
		<xsd:annotation>
			<xsd:documentation>Device management cache that uses Ehcache for the underlying cache
				mechanism.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ehcacheDeviceManagementCacheType">
		<xsd:complexContent>
			<xsd:extension base="abstractCacheType">
				<xsd:attribute name="siteCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the site cache.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceSpecificationCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the device specification cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the device cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceAssignmentCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the device assignment cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="siteCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for site cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceSpecificationCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for device specification cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for device cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceAssignmentCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for device assignment cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Creates default device model data -->
	<xsd:complexType name="defaultDeviceModelInitializerType">
		<xsd:attribute name="initializeIfNoConsole" type="xsd:boolean"></xsd:attribute>
	</xsd:complexType>

	<!-- Creates default user model data -->
	<xsd:complexType name="defaultUserModelInitializerType">
		<xsd:attribute name="initializeIfNoConsole" type="xsd:boolean"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="inboundProcessingChainType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="inbound-event-processor" type="inboundProcessorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom inbound event processor implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="default-event-storage-processor" type="defaultEventStorageProcessorType">
					<xsd:annotation>
						<xsd:documentation>
							Provides standard behavior of storing SiteWhere events via
							service provider interfaces. If this event processor is not enabled, data will not
							be stored or otherwise processed by SiteWhere.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="inboundProcessorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="defaultEventStorageProcessorType"/>

	<xsd:complexType name="outboundProcessingChainType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="outbound-event-processor" type="outboundProcessorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom outbound event processor implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="provisioning-event-processor" type="provisioningEventProcessorType">
					<xsd:annotation>
						<xsd:documentation>
							Hands off outbound device command events to the provisioning
							subsystem. If this event processor is not configured, no commands will be sent to
							devices.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="outboundProcessorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="provisioningEventProcessorType"/>

	<xsd:complexType name="provisioningType">
		<xsd:sequence>
			<xsd:element name="event-sources" type="eventSourcesType">
				<xsd:annotation>
					<xsd:documentation>
						Event sources receive and decode events so that they may be
						processed by SiteWhere.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="registration" type="registrationType">
				<xsd:annotation>
					<xsd:documentation>
						Registration elements define how inbound registration events are
						used to register devices.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="command-routing" type="commandRoutingType">
				<xsd:annotation>
					<xsd:documentation>
						Command routing determines which destination is used for
						processing a given command invocation.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="command-destinations" type="commandDestinationsType">
				<xsd:annotation>
					<xsd:documentation>
						Command destinations process command invocation events, encoding
						them then delivering them to devices.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Contains information about inbound event sources -->
	<xsd:complexType name="eventSourcesType">
		<xsd:sequence>
			<xsd:element ref="abstract-event-source" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for decoders to allow substitutionGroups -->
	<xsd:element name="abstract-decoder" abstract="true" type="abstractDecoderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for decoder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common decoder information -->
	<xsd:complexType name="abstractDecoderType"/>
	
	<!-- Reference to an event decoder defined as a Spring bean -->
	<xsd:element name="event-decoder" type="eventDecoderReferenceType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>References a decoder defined in an external bean</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="eventDecoderReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Decode using the standard SiteWhere Google Protocol Buffer definition -->
	<xsd:element name="protobuf-event-decoder" type="swProtobufDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that expects a message in the SiteWhere Google Protocol
				Buffer format.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swProtobufDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Decode using the standard SiteWhere JSON representation -->
	<xsd:element name="json-event-decoder" type="swJsonDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that expects a message in the SiteWhere JSON batch format.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJsonDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for event sources to allow substitutionGroups -->
	<xsd:element name="abstract-event-source" abstract="true" type="abstractEventSourceType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for event source elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common event source information -->
	<xsd:complexType name="abstractEventSourceType"/>
	
	<!-- Attributes common to all event sources -->
	<xsd:attributeGroup name="event-source-attributes">
		<xsd:attribute name="sourceId" type="xsd:token" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique identifier for event source.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- Reference to an event source defined in Spring beans -->
	<xsd:element name="event-source" type="eventSourceReferenceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source defined externally as a Spring bean</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="eventSourceReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that pulls binary information from an MQTT topic and decodes it -->
	<xsd:element name="mqtt-event-source" type="mqttEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from an MQTT topic and
				decodes it
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mqttEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder"/>
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes"/>
				<xsd:attributeGroup ref="mqtt-inbound-attributes"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Attributes used for inbound MQTT processing -->
	<xsd:attributeGroup name="mqtt-inbound-attributes">
		<xsd:attribute name="hostname" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					MQTT broker hostname.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="port" type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>
					MQTT broker port.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="topic" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					MQTT topic used to deliver inbound events.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<xsd:complexType name="registrationType">
		<xsd:sequence>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:element name="registration-manager" type="registrationManagerReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom registration manager implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="default-registration-manager" type="defaultRegistrationManagerType">
					<xsd:annotation>
						<xsd:documentation>
							Configures the default registration manager implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="registrationManagerReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="defaultRegistrationManagerType">
		<xsd:attribute name="allowNewDevices" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation>Indicates whether new devices should be allowed to register. If set
					to false, devices not already in the system will be rejected.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="autoAssignSite" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation>Indicates whether the site should automatically be chosen if not
					passed with registration request.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="autoAssignToken" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Token for site used in auto assignment. If not set and
					'autoAssignSite' is set to true, the first site will be used.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandRoutingType">
		<xsd:sequence>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:element name="command-router" type="commandRouterReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command router implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="specification-mapping-router" type="specificationMappingRouterType">
					<xsd:annotation>
						<xsd:documentation>
							Command router that distributes commands to destinations based on
							a mapping of specification token to command agent id.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="commandRouterReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="specificationMappingRouterType">
		<xsd:sequence>
			<xsd:element name="mapping" type="specificationMappingRouterMappingType"
				minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Mapping of a specification token to a destination id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="specificationMappingRouterMappingType">
		<xsd:attribute name="specification" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="destination" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Enumerates available command agent choices -->
	<xsd:complexType name="commandDestinationsType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="command-destination" type="commandDestinationReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command destination implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="mqtt-command-destination" type="mqttCommandDestinationType">
					<xsd:annotation>
						<xsd:documentation>
							Destination that delivers commands via MQTT.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="twilio-command-destination" type="twilioCommandDestinationType">
					<xsd:annotation>
						<xsd:documentation>
							Destination that delivers commands via Twilio SMS messages.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- Attributes common to all command destinations -->
	<xsd:attributeGroup name="command-destination-attributes">
		<xsd:attribute name="destinationId" type="xsd:token" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique identifier for command destination.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- References command destination defined in a Spring bean -->
	<xsd:complexType name="commandDestinationReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Used as a placeholder for command encoders to allow substitutionGroups -->
	<xsd:element name="abstract-command-encoder" abstract="true"
		type="abstractCommandEncoderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for command encoder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common command encoder information -->
	<xsd:complexType name="abstractCommandEncoderType"/>
	
	<!-- Reference to a command encoder defined as a Spring bean -->
	<xsd:element name="command-encoder" type="commandEncoderReferenceType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>References a command encoder defined in an external bean
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="commandEncoderReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Encodes commands using standard SiteWhere Google Protocol Buffer naming convention -->
	<xsd:element name="protobuf-command-encoder" type="swProtobufCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that encodes commands based on standard SiteWhere
				Google Protocol Buffer naming convention.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swProtobufCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Command destination that delivers commands via MQTT -->
	<xsd:complexType name="mqttCommandDestinationType">
		<xsd:sequence>
			<xsd:element ref="abstract-command-encoder"/>
			<xsd:choice minOccurs="0">
				<xsd:element name="parameter-extractor" type="commandDeliveryParameterExtractorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command delivery parameter extractor
							implementation that extracts MQTT delivery information from the
							device.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="hardware-id-topic-extractor" type="hardwareIdMqttParameterExtractorType">
					<xsd:annotation>
						<xsd:documentation>
							Substitutes device hardware id into expressions to determine the
							outbound topics to which MQTT messages will be sent.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attributeGroup ref="command-destination-attributes"/>
		<xsd:attribute name="hostname" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="port" type="xsd:int"></xsd:attribute>
	</xsd:complexType>

	<!-- MQTT parameter extractor that substitutes device hardware id into expressions -->
	<xsd:complexType name="hardwareIdMqttParameterExtractorType">
		<xsd:attribute name="commandTopicExpr" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="systemTopicExpr" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Command destination that delivers commands via Twilio SMS message -->
	<xsd:complexType name="twilioCommandDestinationType">
		<xsd:sequence>
			<xsd:element ref="abstract-command-encoder"/>
			<xsd:element name="parameter-extractor" type="commandDeliveryParameterExtractorReferenceType">
				<xsd:annotation>
					<xsd:documentation>
						References a custom command delivery parameter extractor
						implementation that extracts SMS delivery information from the
						device.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attributeGroup ref="command-destination-attributes"/>
		<xsd:attribute name="accountSid" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="authToken" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="fromPhoneNumber" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandExecutionEncoderReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandDeliveryParameterExtractorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandDeliveryProviderReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Specifies asset management features -->
	<xsd:complexType name="assetManagementType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="asset-module" type="assetModuleReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom asset module implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-device-asset-module" type="fileSystemDeviceAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem device asset module instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-hardware-asset-module" type="fileSystemHardwareAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem hardware asset module instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-person-asset-module" type="fileSystemPersonAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem person asset module instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Reference to an asset module defined in a Spring bean -->
	<xsd:complexType name="assetModuleReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem device asset module -->
	<xsd:complexType name="fileSystemDeviceAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem hardware asset module -->
	<xsd:complexType name="fileSystemHardwareAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem person asset module -->
	<xsd:complexType name="fileSystemPersonAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Common configuration for filesystem asset modules -->
	<xsd:complexType name="fileSystemAssetModuleType">
		<xsd:attribute name="moduleId" type="xsd:string" use="optional"/>
		<xsd:attribute name="moduleName" type="xsd:string" use="optional"/>
		<xsd:attribute name="filename" type="xsd:string" use="optional"/>
	</xsd:complexType>

</xsd:schema>